import requests
import time
import click
import json
import uuid
import json
from json.decoder import JSONDecodeError
from nested_lookup import nested_lookup
from datetime import date

@click.command()							

def main():

    filelist = ["./nvdcve-1.1-2017.json","./nvdcve-1.1-2018.json","./nvdcve-1.1-2019.json","./nvdcve-1.1-2020.json","./nvdcve-1.1-2021.json","./nvdcve-1.1-2022.json"]

    for file in filelist:
        """Open for read"""
        f = open(file)
        data = json.load(f)

        vulns = []

        for item in data['CVE_Items']:
            cve_id = item["cve"]["CVE_data_meta"]["ID"]
            created_at = item["publishedDate"]
            updated_at = item["lastModifiedDate"]
            references = item["cve"]["references"]["reference_data"]
            summary = item["cve"]["description"]["description_data"][0]["value"]
            cvss2 = (
                item["impact"]["baseMetricV2"]
                if "baseMetricV2" in item["impact"]
                else None
            )
            cvss3 = (
                item["impact"]["baseMetricV3"]
                if "baseMetricV3" in item["impact"]
                else None
            )

            # Construct CWE and CPE lists
            cwes = get_cwes(
                item["cve"]["problemtype"]["problemtype_data"][0]["description"]
            )

            cpes = convert_cpes(item["configurations"])
            # print(cpes)

            # start formula
            if cvss3 is not None:
                if "exploitabilityScore" in cvss3:
                    ex = (cvss3["exploitabilityScore"])
                if "impactScore" in cvss3:
                    im = (cvss3["impactScore"])
            if cvss2 is not None:
                if "exploitabilityScore" in cvss2:
                    ex = (cvss2["exploitabilityScore"])
                if "impactScore" in cvss2:
                    im = (cvss2["impactScore"])

            score = (2 * ex * im)/(ex + im)

            published_year = created_at.split("T")[0].split("-")[0]
            current_year = date.today().year

            if int(published_year) >= int(current_year) - 5:
                pass
            else:
                if int(published_year) >= int(current_year) - 10: 
                    score = score * 0.5 
                else:
                    score = score * 0.25

            if cvss3 is not None and "cvssV3" in cvss3 and "privilegesRequired" in cvss3["cvssV3"]:  
                if cvss3["cvssV3"]["privilegesRequired"] is not None and cvss3["cvssV3"]["privilegesRequired"] == "HIGH":
                    score = score * 0.80 
                elif cvss3["cvssV3"]["privilegesRequired"] is not None and cvss3["cvssV3"]["privilegesRequired"] == "LOW":
                    score = score * 0.95 

            if cvss2 is not None and "cvssV2" in cvss2 and "attackComplexity" in cvss2["cvssV2"]:
                if cvss2["cvssV2"]["attackComplexity"] is not None and  cvss2["cvssV2"]["attackComplexity"] == "HIGH":
                    score = score * 0.80 
                elif cvss2["cvssV2"]["attackComplexity"] is not None and cvss2["cvssV2"]["attackComplexity"] == "MEDIUM":
                    score = score * 0.95 

            if round(score, 2) >= 7:
                vulns.append({
                "cve_id":cve_id,
                "created_at":created_at,
                "updated_at":updated_at,
                "references":references,
                "summary":summary,
                "cvss2":cvss2,
                "cvss3":cvss3,
                "cwes":cwes,
                "cpes":cpes,
                "score":round(score, 2)
            })
          
        
        # Closing file
        f.close()

        print(vulns[0])
        print(json.dumps(vulns[0], indent=4, sort_keys=True))

        with open(file + '-data.json', 'w', encoding='utf-8') as f:
            json.dump(vulns, f, ensure_ascii=False, indent=4)

def get_uuid():
    return str(uuid.uuid4())    

def get_cwes(problems):
    """
    Takes a list of problems and return the CWEs ID.
    """
    return list(set([p["value"] for p in problems]))

def convert_cpes(conf):
    """
    This function takes an object, extracts its CPE uris and transforms them into
    a dictionnary representing the vendors with their associated products.
    """
    uris = nested_lookup("cpe23Uri", conf) if not isinstance(conf, list) else conf
    # print(uris)
    affected = []

    for uri in uris:
        # print(uri.split(":")[3:6])
        affectedVendors = uri.split(":")[3]
        # print(affectedVendors)
        affectedProducts = uri.split(":")[4]
        # print(affectedProducts)
        affectedProductVersion = uri.split(":")[5]
        # print(affectedProductVersion)

        affected.append({
            "vendor": affectedVendors,
            "product": affectedProducts,
            "version": affectedProductVersion,
        })

    return affected




if __name__ == '__main__':
    main()